/*
 * copyright  (C) 2010
 * The Icecube Collaboration
 *
 * $Id$
 *
 * @version $Revision$
 * @date $LastChangedDate$
 * @author Fabian Kislat <fabian.kislat@desy.de>, $LastChangedBy$
 */

/**
   \mainpage rootwriter - A tableio backend
   \author Fabian Kislat <fabian.kislat@desy.de>, $LastChangedBy$

   This page summarizes the usage of the rootwriter tableio backend. For more
   details on tableio, please read
   <a href="../../projects/tableio/index.html">the tableio documentation</a>.

   The rootwriter project supplies a tableio I3TableService and an I3Table
   implementation to export data from IceTray to root trees. Tableio converters
   are used to convert the objects in the I3Frame. In order to use the 
   rootwriter backend, construct an I3ROOTTableService object in the steering
   file
   \code
     rootout = I3ROOTTableService(outputfilename)
   \endcode
   The first parameter of the constructor is the filename of the output file.
   For a documentation of the other (optional) parameters, read the 
   documentation of I3ROOTTableService. Once created you can pass this
   object as the <code>tableservice</code> parameter to an 
   <code>I3TableWriter</code>:
   \code
   tray.AddModule(I3TableWriter, "recowriter",
                  tableservice = rootout,
		  ...
		  )
   \endcode

   The ROOT files created by rootwriter contain a <code>TTree</code> for each
   frame object. The trees themselves have an entirely flat structure. Each
   tree contains at least three branches:
   <ul>
   <li><code>UInt_t Run</code> - the run number,</li>
   <li><code>UInt_t Event</code> - the event number,<li>
   <li><code>Bool_t exists</code> - set to false, if the corresponding object
       did not exist in the frame.</li>
   </ul>
   In order to align the trees every tree contains one line for each event. 
   Therefore it is important to always check the value of <code>exists</code>. 
   If the object stored in the tree was an array like structure (like e.g. an
   <code>I3RecoPulseSeriesMap</code>) an additional branch is added to the
   tree
   <ul>
   <li><code>ULong64_t Count_&lt;tree_name&gt;</code> - the number of items in 
       the current event.</li>
   </ul>
   All further branches are then arrays of the given length. Every branch 
   has the description stored in the branch title. You can access it via
   \code
     tree->GetBranch("branch")->GetTitle();
   \endcode
   These descriptions are provided by the individual converters and are the
   same as those stored in the hdf header.
   \todo Implement storage for the units.

   All trees are friends of a master tree, which by default is called 
   <code>MasterTree</code>. Using this master tree, individual branches can be
   refered to as branches of this master tree, under the name 
   <code>tree_name.branch_name</code>.
*/
